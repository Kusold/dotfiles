# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
    ../../modules/hardware-dell-7060.nix
  ];

  boot.initrd.supportedFilesystems = [ "btrfs" ];
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];
  boot.loader.systemd-boot.enable = true;

  # Resets root to a blank state after each reboot
  boot.initrd.postDeviceCommands = lib.mkAfter ''
    # If this causes issues, check out the following links:
    # https://guekka.github.io/nixos-server-1/
    # https://github.com/nix-community/impermanence/issues/119

    mkdir /btrfs_tmp
    mount /dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71 /btrfs_tmp
    if [[ -e /btrfs_tmp/root ]]; then
        mkdir -p /btrfs_tmp/old_roots
        timestamp=$(date --date="@$(stat -c %Y /btrfs_tmp/root)" "+%Y-%m-%-d_%H:%M:%S")
        mv /btrfs_tmp/root "/btrfs_tmp/old_roots/$timestamp"
    fi

    delete_subvolume_recursively() {
        IFS=$'\n'
        for i in $(btrfs subvolume list -o "$1" | cut -f 9- -d ' '); do
            delete_subvolume_recursively "/btrfs_tmp/$i"
        done
        btrfs subvolume delete "$1"
    }

    for i in $(find /btrfs_tmp/old_roots/ -maxdepth 1 -mtime +30); do
        delete_subvolume_recursively "$i"
    done

    btrfs subvolume create /btrfs_tmp/root
    umount /btrfs_tmp
  '';

  fileSystems."/persistant_disk" = {
    device = "/dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71";
    fsType = "btrfs";
  };
  fileSystems."/" = {
    device = "/dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71";
    fsType = "btrfs";
    options = [ "subvol=root" ];
  };
  fileSystems."/persist" = {
    device = "/dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71";
    fsType = "btrfs";
    options = [ "subvol=persist" ];
    neededForBoot = true;
  };
  fileSystems."/etc/nixos" = {
    device = "/dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71";
    fsType = "btrfs";
    options = [ "subvol=nixos-config" "compress=zstd" ];
  };
  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71";
    fsType = "btrfs";
    options = [ "subvol=home" "compress=zstd" ];
  };
  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71";
    fsType = "btrfs";
    options = [ "subvol=nix" "compress=zstd" ];
  };
  fileSystems."/var/log" = {
    device = "/dev/disk/by-uuid/c09e5c9a-dc32-43ac-8a4b-6759f8aa1b71";
    fsType = "btrfs";
    options = [ "subvol=log" ];
    neededForBoot = true;
  };
  fileSystems."/mnt/root-ext4" = {
    device = "/dev/disk/by-uuid/89bdb331-653b-4da2-9f8b-292155f213e4";
    fsType = "ext4";
  };

  fileSystems."/boot" = { device = "/dev/disk/by-uuid/F4F5-6A1D";
    fsType = "vfat";
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
}
