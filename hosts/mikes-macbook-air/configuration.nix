
{ pkgs, inputs, currentSystemName, ... }:
{
  environment.darwinConfig = "$HOME/Development/dotfiles/hosts/${currentSystemName}.nix";
  nixpkgs.hostPlatform = "aarch64-darwin";
  # List packages installed in system profile. To search by name, run:
  # $ nix-env -qaP | grep wget
  environment.systemPackages =
    [
      # Copied from Existing homebrew
      #pkgs.age
      pkgs.htop
   
      pkgs.kompose
      pkgs.kubernetes-helm
      pkgs.kustomize
      pkgs.lua
      pkgs.neovim
      pkgs.ripgrep
      pkgs.vim
      pkgs.wget
#
#
#      # required for neovim
#      pkgs.luajit
#      pkgs.nodePackages.diagnostic-languageserver
#      pkgs.nodePackages.eslint
#      pkgs.nodePackages.dockerfile-language-server-nodejs
#      pkgs.sqls
#      pkgs.gopls
#      pkgs.docker-compose-language-service
#      pkgs.nodePackages.bash-language-server
#      pkgs.ansible-language-server
#      pkgs.nodePackages.vscode-json-languageserver
#      pkgs.nodePackages.typescript-language-server
#      pkgs.nodePackages.yaml-language-server
#      pkgs.nodejs_20
#      pkgs.go
    ];

  fonts.fontDir.enable = true;
  fonts.fonts = with pkgs; [
    (nerdfonts.override { fonts = [ "FiraCode" "Hack" "JetBrainsMono" "SourceCodePro" "NerdFontsSymbolsOnly" ]; })
  ];

  # This kept triggering security alerts
  # A process attempted to stop or kill the Background Task Management Agent, possibly to establish persistence without user notification.
  # Auto upgrade nix package and the daemon service.
  services.nix-daemon.enable = true;
  #nix.package = pkgs.nix;


#  system.keyboard.enableKeyMapping = true;
#  system.keyboard.remapCapsLockToEscape = true;
#  system.defaults.CustomUserPreferences = {
#  #defaults write org.hammerspoon.Hammerspoon MJConfigFile "~/.config/hammerspoon/init.lua"
#    "org.hammerspoon.Hammerspoon" = {
#      MJConfigFile = "~/.config/hammerspoon/init.lua";
#    };
#  };
#  system.defaults.dock = {
#    orientation = "right";
#    magnification = true;
#    largesize = 16;
#    mru-spaces = false;
#    show-recents = false;
#  };
#  system.defaults.NSGlobalDomain.ApplePressAndHoldEnabled = true;
#  security.pam.enableSudoTouchIdAuth = true;
#
#  # Create /etc/zshrc that loads the nix-darwin environment.
  programs.zsh.enable = true;  # default shell on catalina
#  # programs.fish.enable = true;
#
  homebrew = {
    enable = true;
    casks = [
      "1password-cli"
			"disk-inventory-x"
      "docker"
      "element"
      "focus"
      "iterm2"
      "ledger-live"
      "obsidian"
      "openlens"
      "plex"
      "syncthing"
      "visual-studio-code"
      "vlc"
    ];
    masApps = {
      "Amphetamine" = 937984704;
    };
  };
	# Enable experimental nix command and flakes
# nix.package = pkgs.nixUnstable;
  nix.extraOptions = ''
	  # Generated by https://github.com/DeterminateSystems/nix-installer, version 0.14.0.
		experimental-features = nix-command flakes repl-flake
		bash-prompt-prefix = (nix:$name)\040
		extra-nix-path = nixpkgs=flake:nixpkgs
  '';

  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.allowUnfreePredicate = _: true;

#
#  nixpkgs.config = {
#    allowUnfree = true;
#    #allowUnfreePredicate = (_: true);
#  };
##  nixpkgs.config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [
##    "code"
##  ];
#
 users.users.mike = {
    name = "mike";
    home = "/Users/mike";
    openssh.authorizedKeys.keys = let
      authorizedKeys = pkgs.fetchurl {
        url = "https://github.com/kusold.keys";
        sha256 = "7Wt+i5OWJAVLKnZu8BoDgRHqQL0APJIBU5TSQ5TbsQE=";
      };
      in pkgs.lib.splitString "\n" (builtins.readFile authorizedKeys);
 };
}
